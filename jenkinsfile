pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "flipkart-app"
        DOCKER_TAG   = "latest"
        DOCKER_USER  = credentials('dockerhub-pass')
    }

    stages {
        stage('Build Maven Project') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    docker rmi -f vijay3247/${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    docker build -t vijay3247/${DOCKER_IMAGE}:${DOCKER_TAG} .
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'dockerhub-pass',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push vijay3247/${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Deploy Local Container') {
            steps {
                sh """
                    docker stop ${DOCKER_IMAGE} || true
                    docker rm ${DOCKER_IMAGE} || true
                    docker run -d --name ${DOCKER_IMAGE} -p 8079:8080 vijay3247/${DOCKER_IMAGE}:${DOCKER_TAG}
                """
            }
        }

        stage('Docker Swarm Deploy') {
            steps {
                script {
                    try {
                        sh '''
                            if docker service ls --format '{{.Name}}' | grep -q '^flipkartserv$'; then
                                echo "Updating existing service..."
                                docker service update --force --image vijay3247/${DOCKER_IMAGE}:${DOCKER_TAG} flipkartserv
                            else
                                echo "Creating new service..."
                                docker service create --name flipkartserv -p 8079:8080 vijay3247/${DOCKER_IMAGE}:${DOCKER_TAG}
                            fi
                        '''
                    } catch (Exception e) {
                        sh '''
                            echo "Update failed. Debugging..."
                            docker service ps flipkartserv --no-trunc
                        '''
                        throw e
                    }
                }
            }
        }
    }
}

